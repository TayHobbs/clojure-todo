<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1432852981265">{:repl-history {:ide [], :local [&quot;(def todos (atom [{:id 0}]))&quot; &quot;(defn add-todo []\n  (read-line))&quot; &quot;(add-todo)&quot; &quot;satisfies?&quot; &quot;;&quot; &quot;\\&quot; &quot;dec&quot; &quot;(swap todos conj {:id 1})&quot; &quot;(swap @todos conj {:id 1})&quot; &quot;(swap! todos conj {:id 1})&quot; &quot;(for [x @todos] (println x))&quot; &quot;(filter (:id = 1) @todos)&quot; &quot;(filter (= :id 1) @todos)&quot; &quot;(filter :id @todos)&quot; &quot;#(-&gt; % val (= 1))&quot; &quot;(filter #(-&gt; % :id (= 1)) @todos)&quot; &quot;(swap! todos conj {:id 2 :todo 'Todo 1'})&quot; &quot;(swap! todos conj {:id 2 :todo \&quot;Todo 1\&quot;})&quot; &quot;(filter #(-&gt; % :todo (= \&quot;Todo 1\&quot;)) @todos)&quot; &quot;(remove {:id 2 :todo \&quot;Todo 1\&quot;} @todos)&quot; &quot;(.indexOf {:id 2 :todo \&quot;Todo 1\&quot;} @todos)&quot; &quot;(.indexOf @todos {:id 2 :todo \&quot;Todo 1\&quot;})&quot; &quot;(subvec @todos 2)&quot; &quot;(subvec @todos 1)&quot; &quot;(def todos (atom #{1 {:id 0}}))&quot; &quot;(swap! todos conj (2, :id 1))&quot; &quot;(swap! todos conj (2, {:id 1}))&quot; &quot;(swap! todos conj (2 {:id 1}))&quot; &quot;(swap! todos conj 2 {:id 1})&quot; &quot;(def todos (atom #{1: {:id 0}}))&quot; &quot;(def todos (atom {1: {:id 0}}))&quot; &quot;(def todos (atom #{:id 0 :todo \&quot;Todo 0\&quot;}))&quot; &quot;(def todos (atom {:id 0 :todo \&quot;Todo 0\&quot;}))&quot; &quot;@todo s&quot; &quot;(def x {1 #{2 3}, 2 #{1 4}, 3 #{1 5}, 4 #{2}, 5 #{3}})&quot; &quot;(x)&quot; &quot;{x}&quot; &quot;(swap! x conj 6 #{6})&quot; &quot;(swap! x conj {6 #{6}})&quot; &quot;(defn remove-node [graph node]\n  (into {} (for [[k v] (dissoc graph node)]\n             [k (disj v node)])))&quot; &quot;(remove-node [x 1])&quot; &quot;(conj x #{6})&quot; &quot;(conj x {6})&quot; &quot;(conj x 6)&quot; &quot;(remove-node x 1)&quot; &quot;x&quot; &quot;(def x atom ({1 #{2 3}, 2 #{1 4}, 3 #{1 5}, 4 #{2}, 5 #{3}}))&quot; &quot;(def x (atom {1 #{2 3}, 2 #{1 4}, 3 #{1 5}, 4 #{2}, 5 #{3}}))&quot; &quot;(remove-node @x 1)&quot; &quot;@x&quot; &quot;#{:id 1 :name \&quot;Todo\&quot;}&quot; &quot;(def x (atom {1 {:name \&quot;todo\&quot;}, 2 #{1 4}, 3 #{1 5}, 4 #{2}, 5 #{3}}))&quot; &quot;(@x 1)&quot; &quot;(swap! @x conj {6})&quot; &quot;(swap! @x conj 6)&quot; &quot;(swap! x conj 6)&quot; &quot;(swap! x conj {6})&quot; &quot;{:id 1 :todo {:name 'Todo'}}&quot; &quot;(swap! x assoc :name \&quot;New todo\&quot;)&quot; &quot;(swap! x assoc 2 {:name \&quot;New todo\&quot;})&quot; &quot;(@x 2)&quot; &quot;(swap! x conj 3 {:name \&quot;New todo 1\&quot;})&quot; &quot;(swap! x conj :name \&quot;New todo 1\&quot;)&quot; &quot;()&quot; &quot;(todo.core/todos)&quot; &quot;(defn max-id []\n  (apply max-key @todos))&quot; &quot;(defn max-id []\n  (apply max-key max-@todos))&quot; &quot;(max-id)&quot; &quot;(def next-id []\n  (inc ((apply max-key :id @todos) :id)))&quot; &quot;(defn next-id []\n  (inc ((apply max-key :id @todos) :id)))&quot; &quot;(defn next-id []\n  (-&gt;&gt;\n    @todos\n    (map :id)\n    (apply max)\n    (+ 1)))\n&quot; &quot;(def todos (atom [{:id 1}]))&quot; &quot;(next-id)&quot; &quot;(def todos (atom []))&quot; &quot;(apply max-key :id @todos)&quot; &quot;(def todos (atom [{:id 1 :title 'Todo' :completed true}]))&quot; &quot;@todo&quot; &quot;@todos&quot; &quot;(map @todos :id)&quot; &quot;(for x @todos\n       (x))&quot; &quot;(for [x @todos] (x))&quot; &quot;(def contacts (atom [{:id 1 :name \&quot;Jarrod Taylor\&quot; :phone \&quot;(555) 666-7777\&quot; :email \&quot;Jarrod@JarrodCTaylor.com\&quot;}\n                     {:id 2 :name \&quot;James Dalton\&quot;  :phone \&quot;(123) 567-8901\&quot; :email \&quot;Cooler@Roadhouse.com\&quot;}\n                     {:id 3 :name \&quot;Johnny Utah\&quot;   :phone \&quot;(543) 333-1234\&quot; :email \&quot;J.Utah@Buckeyes.com\&quot;}]))&quot; &quot;(for [contact @contacts]\n  (contact))&quot; &quot;(for [contact @contacts]\n  contact)&quot; &quot;(for [x @todos] x)&quot; &quot;(todo.core/-main)&quot; &quot;(todo.core/-main [])&quot; &quot;(todo.core/next-id)&quot;], :remote []}}</component>
</project>